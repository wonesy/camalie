// Code generated by MockGen. DO NOT EDIT.
// Source: hub.go

// Package mock_yenta is a generated GoMock package.
package mock_yenta

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockSpoke is a mock of Spoke interface
type MockSpoke struct {
	ctrl     *gomock.Controller
	recorder *MockSpokeMockRecorder
}

// MockSpokeMockRecorder is the mock recorder for MockSpoke
type MockSpokeMockRecorder struct {
	mock *MockSpoke
}

// NewMockSpoke creates a new mock instance
func NewMockSpoke(ctrl *gomock.Controller) *MockSpoke {
	mock := &MockSpoke{ctrl: ctrl}
	mock.recorder = &MockSpokeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpoke) EXPECT() *MockSpokeMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockSpoke) ID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSpokeMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSpoke)(nil).ID))
}

// Send mocks base method
func (m *MockSpoke) Send(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSpokeMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSpoke)(nil).Send), arg0)
}
